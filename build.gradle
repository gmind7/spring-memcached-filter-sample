description = "Spring Memcached Filter Sample"

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

buildscript {
	repositories {
		jcenter()
		maven { url "http://repo.spring.io/plugins-release" }		
		maven { url "http://repo.spring.io/plugins-milestone" }
		maven { url "http://repo.spring.io/plugins-snapshot" }
	}
	dependencies {
		classpath "org.gradle.api.plugins:gradle-tomcat-plugin:$gradleTomcatPluginVersion"
		classpath "org.gradle.api.plugins:gradle-cargo-plugin:$gradleCargoPluginVersion"
		classpath "org.springframework.build.gradle:bundlor-plugin:$gradleSpringBundlorPluginVersion"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$gradleSpringBootPluginVersion"
	}
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "$gradleVersion"
	
	doLast() {
      def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
      def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
      File wrapperFile = file("gradlew")
      wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
                                                  "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
      File wrapperBatFile = file("gradlew.bat")
      wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
                                                        "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse-wtp"
apply plugin: "maven"
apply plugin: "war"
apply plugin: "tomcat"
apply plugin: "cargo"
apply from: "${gradleScriptDir}/ide.gradle"
apply from: "${gradleScriptDir}/maven.gradle"

configurations {
    compile.extendsFrom providedCompile
    all {
        //Hack to let Gradle pickup latest SNAPSHOTS
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
    }
}

project.sourceCompatibility = 1.7
project.targetCompatibility = 1.7

[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g", "-encoding", "UTF-8"]

sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://repo.spring.io/libs-snapshot" }
}
	
javadoc {
  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
  options.author = true
  options.header = rootProject.name
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allJava
}
task javadocJar(type: Jar) {
  classifier = "javadoc"
  from javadoc
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

dependencies {
  // Spring
  compile("org.springframework:spring-core:$springVersion") { force = true }
  compile("org.springframework:spring-beans:$springVersion") { force = true }	
  compile("org.springframework:spring-context:$springVersion") { force = true }
  compile("org.springframework:spring-context-support:$springVersion") { force = true }
  compile("org.springframework:spring-aop:$springVersion") { force = true }
  compile("org.springframework:spring-aspects:$springVersion") { force = true }
  compile("org.springframework:spring-expression:$springVersion") { force = true }
  compile("org.springframework:spring-tx:$springVersion") { force = true }
  compile("org.springframework:spring-web:$springVersion") { force = true }
  compile("org.springframework:spring-webmvc:$springVersion") { force = true }
  compile("org.springframework.hateoas:spring-hateoas:$springHateoasVersion") { force = true }
  
  // AspectJ
  compile "org.aspectj:aspectjrt:$aspectjVersion"
  compile "org.aspectj:aspectjweaver:$aspectjVersion"
  compile "aopalliance:aopalliance:$aopallianceVersion"
  
  // Jackson
  compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
  
  // JSR 303 with Hibernate Validator
  compile "javax.validation:validation-api:$javaxValidationVersion"
  compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
  
  // Apache Commons
  compile "org.apache.commons:commons-lang3:$apacheCommonsLang3Version"
  compile "commons-io:commons-io:$apacheCommonsIOVersion"
  compile "commons-fileupload:commons-fileupload:$apacheCommonsFileuploadVersion"
  compile "commons-beanutils:commons-beanutils:$apacheCommonsBeanutilsVersion"
  compile "commons-collections:commons-collections:$apacheCommonsCollectionsVersion"
  compile "commons-configuration:commons-configuration:$apacheCommonsConfigurationVersion"
  compile "commons-pool:commons-pool:$apacheCommonsPoolVersion"
  compile "org.apache.httpcomponents:httpclient:$apacheHttpclientVersion"
  
  // Memcached
  compile "com.google.code.simple-spring-memcached:simple-spring-memcached:$ssmVersion"
  compile "com.google.code.simple-spring-memcached:spring-cache:$ssmVersion"
  compile "com.google.code.simple-spring-memcached:spymemcached-provider:$ssmVersion"
  compile "net.spy:spymemcached:$spyMemcachedVersion"
	  
  // Etc Supporting libraries
  runtime "cglib:cglib-nodep:$cglibVersion"
  compile "com.google.guava:guava:$guavaVersion"
  compile "joda-time:joda-time:$jodaVersion"
  //providedCompile "org.projectlombok:lombok:$lombokVersion"
  
  // APIs
  compile "javax.inject:javax.inject:$javaxInjectVersion"
  
  // Thymeleaf
  compile "org.thymeleaf:thymeleaf:$thymeleafVersion"
  compile "org.thymeleaf:thymeleaf-spring3:$thymeleafVersion"
  compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:$thymeleafExtrasSpringsecurity3"
  compile "nz.net.ultraq.web.thymeleaf:thymeleaf-layout-dialect:$thymeleafLayoutDialectVersion"
  
  // Tomcat
  tomcat "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
  tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"
  tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
	  exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
  }
  
  // Cargo
  cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
  cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"
  
  // Servlet
  providedCompile "javax.servlet:javax.servlet-api:$javaxServletApiVersion"
  providedCompile "javax.websocket:javax.websocket-api:$javaxWebSocketVersion"
  providedCompile "javax.servlet:jsp-api:$javaxServletJspApiVersion"
  providedCompile "org.apache.tomcat:tomcat-servlet-api:$tomcatVersion"
  
  // Testing
  testCompile("org.springframework:spring-test:$springVersion") { force = true }
}
cargo {
  containerId = 'tomcat7x'
  port = 9080
}